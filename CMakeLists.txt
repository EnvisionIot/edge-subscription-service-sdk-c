CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(edge_service_sdk_c)

MACRO(SUBDIRLIST result curdir)
    FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
    SET(dirlist "")
    FOREACH(child ${children})
        IF(IS_DIRECTORY ${curdir}/${child})
            LIST(APPEND dirlist ${child})
        ENDIF()
    ENDFOREACH()
    SET(${result} ${dirlist})
ENDMACRO()

IF(DEBUG_MODE)
ADD_DEFINITIONS("-g -DDEBUG_MODE")
ENDIF()

IF(PLATFORM_DEFINE STREQUAL "")
    SET(OS_DEFINE "linux")
    SET(SH_TYPE "sh")
#    ADD_DEFINITIONS("-DPLATFORM_DEFINE=linux_x86_normal_64_local")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_linux_x86_normal_64_local")
#    ADD_DEFINITIONS("-DOS_DEFINE=linux")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
    ADD_DEFINITIONS("-D_LINUX")
    ADD_DEFINITIONS("-Wall -Wno-write-strings -Wno-vla -Wno-unused-function")
    SET(CMAKE_C_COMPILER "gcc")
    SET(CMAKE_CXX_COMPILER "g++")
ELSEIF(PLATFORM_DEFINE STREQUAL "linux_x86_normal_64_local")
    SET(OS_DEFINE "linux")
    SET(SH_TYPE "sh")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_${PLATFORM_DEFINE}")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
    ADD_DEFINITIONS("-D_LINUX")
    ADD_DEFINITIONS("-Wall -Wno-write-strings -Wno-vla -Wno-unused-function")
    SET(CMAKE_C_COMPILER "gcc")
    SET(CMAKE_CXX_COMPILER "g++")
ELSEIF(PLATFORM_DEFINE STREQUAL "linux_x86_centos6_32_local")
    SET(OS_DEFINE "linux")
    SET(SH_TYPE "sh")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_${PLATFORM_DEFINE}")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
    ADD_DEFINITIONS("-D_LINUX")
    ADD_DEFINITIONS("-D_LARGEFILE64_SOURCE")
    ADD_DEFINITIONS("-Wall -Wno-write-strings -Wno-vla -Wno-unused-function")
    SET(CMAKE_C_COMPILER "gcc")
    SET(CMAKE_CXX_COMPILER "g++")
ELSEIF(PLATFORM_DEFINE STREQUAL "win_x86_normal_32_local")
    SET(OS_DEFINE "windows")
    SET(SH_TYPE "bat")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_${PLATFORM_DEFINE}")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
ELSEIF(PLATFORM_DEFINE STREQUAL "linux_armv8_centos7_64_local")
    SET(OS_DEFINE "linux")
    SET(SH_TYPE "sh")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_${PLATFORM_DEFINE}")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
    ADD_DEFINITIONS("-D_LINUX")
    ADD_DEFINITIONS("-D_LARGEFILE64_SOURCE")
    ADD_DEFINITIONS("-Wall -Wno-write-strings -Wno-vla")
    SET(CMAKE_C_COMPILER "gcc")
    SET(CMAKE_CXX_COMPILER "g++")
ELSEIF(PLATFORM_DEFINE STREQUAL "linux_armv7l_moxa_32_local")
    SET(OS_DEFINE "linux")
    SET(SH_TYPE "sh")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_${PLATFORM_DEFINE}")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
    ADD_DEFINITIONS("-D_LINUX")
    ADD_DEFINITIONS("-D_LARGEFILE64_SOURCE")
    ADD_DEFINITIONS("-Wall -Wno-write-strings")
    SET(CMAKE_C_COMPILER "gcc")
    SET(CMAKE_CXX_COMPILER "g++")
ELSEIF(PLATFORM_DEFINE STREQUAL "linux_armv7l_moxa_32_cross")
    SET(OS_DEFINE "linux")
    SET(SH_TYPE "sh")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_${PLATFORM_DEFINE}")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
    ADD_DEFINITIONS("-D_LINUX")
    ADD_DEFINITIONS("-D_LARGEFILE64_SOURCE")
    ADD_DEFINITIONS("-Wall -Wno-write-strings")
    SET(CMAKE_SYSTEM_NAME Linux)
    SET(CMAKE_C_COMPILER "/usr/local/arm-linux-gnueabihf-4.9/usr/bin/arm-linux-gnueabihf-gcc")
    SET(CMAKE_CXX_COMPILER "/usr/local/arm-linux-gnueabihf-4.9/usr/bin/arm-linux-gnueabihf-g++")
ELSEIF(PLATFORM_DEFINE STREQUAL "linux_arm_fsl-linaro_32_cross")
    SET(OS_DEFINE "linux")
    SET(SH_TYPE "sh")
    ADD_DEFINITIONS("-DPLATFORM_DEFINE_${PLATFORM_DEFINE}")
    ADD_DEFINITIONS("-DOS_DEFINE_${OS_DEFINE}")
    ADD_DEFINITIONS("-D_LINUX")
    ADD_DEFINITIONS("-Wall -Wno-write-strings")
    SET(CMAKE_SYSTEM_NAME Linux)
    SET(CMAKE_C_COMPILER "/opt/freescale/usr/local/gcc-4.6.2-glibc-2.13-linaro-multilib-2011.12/fsl-linaro-toolchain/bin/arm-linux-gcc")
    SET(CMAKE_CXX_COMPILER "/opt/freescale/usr/local/gcc-4.6.2-glibc-2.13-linaro-multilib-2011.12/fsl-linaro-toolchain/bin/arm-linux-g++")
#    SET(CMAKE_FIND_ROOT_PATH "/opt/freescale/usr/local/gcc-4.6.2-glibc-2.13-linaro-multilib-2011.12/fsl-linaro-toolchain/arm-fsl-linux-gnueabi/multi-libs/default")
#    SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
#    SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
#    SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
ELSE()
    MESSAGE("supported PLATFORM_DEFINE list:")
    MESSAGE("linux_x86_normal_64_local")
    MESSAGE("linux_x86_centos6_32_local")
    MESSAGE("win_x86_normal_32_local")
    MESSAGE("linux_armv7l_moxa_32_local")
    MESSAGE("linux_arm_fsl-linaro_32_cross")
    MESSAGE(FATAL_ERROR "undefined PLATFORM_DEFINE ${PLATFORM_DEFINE}")
ENDIF()

SET(LIBRARY_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/dst/lib")
SET(EXECUTABLE_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/dst/bin")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/inc")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/3rd/include")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/3rd/include/nsq")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/3rd/include/evbuffsock")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/support/${PLATFORM_DEFINE}/include")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/support/${PLATFORM_DEFINE}/include/libev")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/support/${PLATFORM_DEFINE}/include/jansson")
LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/dst/lib")
LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/dst/lib/support")
ADD_SUBDIRECTORY(inc)
ADD_SUBDIRECTORY(support)
ADD_SUBDIRECTORY(3rd)
ADD_SUBDIRECTORY(lib)
ADD_SUBDIRECTORY(test)