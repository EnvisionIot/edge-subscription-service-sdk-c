/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ssrecordpoint.proto */

#ifndef PROTOBUF_C_ssrecordpoint_2eproto__INCLUDED
#define PROTOBUF_C_ssrecordpoint_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Ssrecorddata__SSRecordPoint Ssrecorddata__SSRecordPoint;
typedef struct _Ssrecorddata__SSRecordPoints Ssrecorddata__SSRecordPoints;


/* --- enums --- */


/* --- messages --- */

struct  _Ssrecorddata__SSRecordPoint
{
  ProtobufCMessage base;
  char *orgid;
  char *modelid;
  char *assetid;
  char *collectdeviceid;
  char *pointid;
  int64_t time;
  char *value;
  int32_t quality;
  int64_t dq;
  char *modelpath;
  char *policytype;
  char *signaltype;
  protobuf_c_boolean hasquality;
  char *datatype;
  char *subdatatype;
  char *attr;
  protobuf_c_boolean has_usingoem;
  int32_t usingoem;
  protobuf_c_boolean has_oemtime;
  int64_t oemtime;
  protobuf_c_boolean has_pointtype;
  int32_t pointtype;
};
#define SSRECORDDATA__SSRECORD_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ssrecorddata__ssrecord_point__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, 0, 0, 0 }


struct  _Ssrecorddata__SSRecordPoints
{
  ProtobufCMessage base;
  size_t n_points;
  Ssrecorddata__SSRecordPoint **points;
};
#define SSRECORDDATA__SSRECORD_POINTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ssrecorddata__ssrecord_points__descriptor) \
    , 0,NULL }


/* Ssrecorddata__SSRecordPoint methods */
void   ssrecorddata__ssrecord_point__init
                     (Ssrecorddata__SSRecordPoint         *message);
size_t ssrecorddata__ssrecord_point__get_packed_size
                     (const Ssrecorddata__SSRecordPoint   *message);
size_t ssrecorddata__ssrecord_point__pack
                     (const Ssrecorddata__SSRecordPoint   *message,
                      uint8_t             *out);
size_t ssrecorddata__ssrecord_point__pack_to_buffer
                     (const Ssrecorddata__SSRecordPoint   *message,
                      ProtobufCBuffer     *buffer);
Ssrecorddata__SSRecordPoint *
       ssrecorddata__ssrecord_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ssrecorddata__ssrecord_point__free_unpacked
                     (Ssrecorddata__SSRecordPoint *message,
                      ProtobufCAllocator *allocator);
/* Ssrecorddata__SSRecordPoints methods */
void   ssrecorddata__ssrecord_points__init
                     (Ssrecorddata__SSRecordPoints         *message);
size_t ssrecorddata__ssrecord_points__get_packed_size
                     (const Ssrecorddata__SSRecordPoints   *message);
size_t ssrecorddata__ssrecord_points__pack
                     (const Ssrecorddata__SSRecordPoints   *message,
                      uint8_t             *out);
size_t ssrecorddata__ssrecord_points__pack_to_buffer
                     (const Ssrecorddata__SSRecordPoints   *message,
                      ProtobufCBuffer     *buffer);
Ssrecorddata__SSRecordPoints *
       ssrecorddata__ssrecord_points__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ssrecorddata__ssrecord_points__free_unpacked
                     (Ssrecorddata__SSRecordPoints *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ssrecorddata__SSRecordPoint_Closure)
                 (const Ssrecorddata__SSRecordPoint *message,
                  void *closure_data);
typedef void (*Ssrecorddata__SSRecordPoints_Closure)
                 (const Ssrecorddata__SSRecordPoints *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ssrecorddata__ssrecord_point__descriptor;
extern const ProtobufCMessageDescriptor ssrecorddata__ssrecord_points__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ssrecordpoint_2eproto__INCLUDED */
